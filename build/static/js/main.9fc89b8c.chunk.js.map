{"version":3,"sources":["components/nft-card/nft-card.js","services/contract-service.js","pages/main-page.js","components/new-nft-form.js","pages/create-nft-page.js","App.js","index.js"],"names":["NftCard","props","key","card","name","className","src","image","alt","description","price","owner","style","textAlign","value","onClick","action","CONTRACT_ADDRESS","checkIfWalletIsConnected","a","window","ethereum","console","log","request","method","accounts","length","account","connectWallet","alert","getAllNFT","provider","ethers","providers","Web3Provider","nftContract","Contract","myEpicNft","abi","fetchItems","nfts","nftCount","nftArray","i","base64TokenUri","tokenURI","replace","tokenUri","atob","JSON","parse","utils","formatUnits","tokenId","push","changeNftUri","currentAccount","newUri","isConfirm","confirm","undefined","signer","getSigner","connectedContract","updateTokenURI","nftTxn","wait","hash","transferNft","to","transferFrom","mintNft","resellToken","createNft","newNftData","imageUrl","json","totalPrice","parseUnits","data","btoa","mint","getOwnerNft","ownerOf","nftOwner","buyItem","parseEther","MainPage","useState","setCurrentAccount","setNftArray","isNftLoading","setIsNftLoading","useEffect","contractService","nftAction","item","color","height","border","padding","borderRadius","map","index","NewNftForm","setNewNFtData","uploadImageToServer","UploadClient","publicKey","uploadFile","then","file","url","uuid","catch","error","isCancel","type","onChange","e","target","multiple","accept","files","href","CreateNftPage","isLoading","setIsLoading","App","exact","path","element","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.9fc89b8c.chunk.js","sourcesContent":["import React from 'react';\n\nconst NftCard = (props) => {\n    return (\n        <div key={props.card.name} className=\"nft-card-item\">\n            <div><img src={props.card.image} alt={props.card.name}/></div>\n            <div className=\"nft-card-item-info\">\n                <div className=\"nft-card-item-info-item\">\n                    <b>name: </b>\n                    <span className=\"nft-card-item-info-item-description\">{props.card.name}</span>\n                </div>\n                <div className=\"nft-card-item-info-item\">\n                    <b>description: </b>\n                    <span className=\"nft-card-item-info-item-description\">{props.card.description}</span>\n                </div>\n                <div className=\"nft-card-item-info-item\">\n                    <b>price: </b>\n                    <span className=\"nft-card-item-info-item-description\">{props.card.price} MATIC</span>\n                </div>\n                <div className=\"nft-card-item-info-item\">\n                    <b>owner: </b>\n                    <span className=\"nft-card-item-info-item-description\">{props.card.owner}</span>\n                </div>\n                <div className=\"nft-card-item-info-item\" style={{textAlign: 'right'}}>\n                    <button value={props.card} onClick={() => {\n                        props.action(props.card)\n                    }}>Купить</button>\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default NftCard;","import {ethers} from \"ethers\";\nimport myEpicNft from \"../utils/MolokoNFT.json\";\n\n// const CONTRACT_ADDRESS = \"0xFAa333Ef7cCc28B418cb98F385101abaae175D73\";\n// const CONTRACT_ADDRESS = \"0x710dde1a33a13700faB57fdD2078393884a7E33E\"; // with change uri\n// const CONTRACT_ADDRESS = \"0xa6E2F5C03a8CFe20e5EfFcF67d8d3CBD249F6fBc\"; // with mint\n// const CONTRACT_ADDRESS = \"0x505FbA675b22D5Ee80808daF8d98dcbFb3e38a1b\"; // with mint\nconst CONTRACT_ADDRESS = \"0x11E6F8D8439e5428961439d6e97b28f1779eE7EA\"; // polygon_test\n\n// const WALlET_TEST = \"0xaA7A746eF21C7786c9A585347529af46BbcD8029\";\n// const WALlET_TEST2 = \"0x284d97066FBbe088EB188d0CF2923Af12c17D2C5\";\n\nconst checkIfWalletIsConnected = async () => {\n\n    const { ethereum } = window;\n\n    if (!ethereum) {\n        console.log(\"Make sure you have metamask!\");\n        return;\n    }\n\n    const accounts = await ethereum.request({ method: 'eth_accounts' });\n\n    if (accounts.length !== 0) {\n        const account = accounts[0];\n        console.log(\"Found an authorized account:\", account);\n\n        return account;\n\n    } else {\n        console.log(\"No authorized account found\");\n    }\n}\n\nconst connectWallet = async () => {\n    try {\n        const { ethereum } = window;\n\n        if (!ethereum) {\n            alert(\"Get MetaMask!\");\n            return;\n        }\n\n        const accounts = await ethereum.request({ method: \"eth_requestAccounts\" });\n        const account = accounts[0];\n\n        console.log(\"Connected = \", account);\n\n        return account;\n\n    } catch (error) {\n        console.log(error);\n    }\n}\n\nconst getAllNFT = async () => {\n    try {\n        const { ethereum } = window\n\n        if (!ethereum) {\n            console.log(\"Ethereum object doesn't exist!\")\n            return;\n        }\n\n        const provider = new ethers.providers.Web3Provider(ethereum)\n        // const signer = provider.getSigner()\n        const nftContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, provider)\n\n        const nfts = await nftContract.fetchItems();\n        const nftCount = nfts.length;\n\n        let nftArray = [];\n\n        for (let i = 0; i < nftCount; i++) {\n\n            const base64TokenUri = nfts[i].tokenURI.replace(\"data:application/json;base64,\", \"\");\n            let tokenUri = atob(base64TokenUri);\n            tokenUri = JSON.parse(tokenUri)\n            tokenUri.price = ethers.utils.formatUnits(nfts[i].price, 'ether');\n            tokenUri.owner = nfts[i].owner;\n            tokenUri.tokenId = i;\n\n            nftArray.push(tokenUri)\n        }\n\n        console.log('nftArray = ', nftArray)\n\n        return nftArray\n\n    } catch (error) {\n        console.log(error)\n        // setTxError(error.message)\n    }\n}\n\nconst changeNftUri = async (currentAccount, tokenId, newUri) => {\n\n    const isConfirm = window.confirm(\"changeNftUri?\");\n\n    if (!isConfirm) {\n        console.log('isConfirm = ', isConfirm);\n        return\n    }\n\n    const ethereum = window.ethereum;\n\n    if (ethereum === undefined || currentAccount === undefined) {\n        console.log('account undefined');\n        console.log('window.ethereum = ', ethereum);\n        return\n    }\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n    const nftTxn = await connectedContract.updateTokenURI(tokenId, newUri);\n\n    console.log(\"Mining...please wait.\")\n    await nftTxn.wait();\n\n    console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n}\n\nconst transferNft = async (currentAccount, tokenId, to) => {\n\n    console.log('currentAccount = ', currentAccount)\n    console.log('tokenId = ', tokenId)\n    console.log('to = ', to)\n\n    const isConfirm = window.confirm(\"transferNft?\");\n\n    if (!isConfirm) {\n        console.log('isConfirm = ', isConfirm);\n        return\n    }\n\n    const ethereum = window.ethereum;\n\n    if (ethereum === undefined || currentAccount === undefined) {\n        console.log('account undefined');\n        console.log('window.ethereum = ', ethereum);\n        return\n    }\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n    const nftTxn = await connectedContract.transferFrom(currentAccount, to, tokenId);\n\n    console.log(\"Mining...please wait.\")\n    await nftTxn.wait();\n\n    console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n}\n\nconst mintNft = async (currentAccount, tokenId) => {\n\n    const isConfirm = window.confirm(\"mintNft?\");\n\n    if (!isConfirm) {\n        console.log('mintNft = ', isConfirm);\n        return\n    }\n\n    const ethereum = window.ethereum;\n\n    if (ethereum === undefined || currentAccount === undefined) {\n        console.log('account undefined');\n        console.log('window.ethereum = ', ethereum);\n        return\n    }\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n    const nftTxn = await connectedContract.resellToken(tokenId);\n\n    console.log(\"Mining...please wait.\")\n    await nftTxn.wait();\n\n    console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n}\n\nconst createNft = async (currentAccount, newNftData) => {\n\n    const name = newNftData.name;\n    const description = newNftData.description;\n    const price = newNftData.price;\n    const imageUrl = newNftData.imageUrl;\n\n    if (name === '' || description === '' || price === '' || imageUrl === '') {\n        console.log('ERROR')\n        console.log('name = ', name)\n        console.log('description = ', description)\n        console.log('price = ', price)\n        console.log('imageUrl = ', imageUrl)\n        return\n    }\n\n    const json = `{\"name\": \"${name}\", \"description\": \"${description}\", \"image\": \"${imageUrl}\" }`;\n\n    //const totalPrice = ethers.utils.parseEther(price);\n    const totalPrice = ethers.utils.parseUnits(price, 'ether');\n\n    const data = btoa(json);\n\n    try {\n        const { ethereum } = window;\n\n        if (ethereum) {\n            const provider = new ethers.providers.Web3Provider(ethereum);\n            const signer = provider.getSigner();\n\n            const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n            console.log(\"Going to pop wallet now to pay gas...\")\n            let nftTxn = await connectedContract.mint(`data:application/json;base64,${data}`, totalPrice);\n\n            console.log(\"Mining...please wait.\")\n            await nftTxn.wait();\n\n            console.log(`Mined, see transaction: https://rinkeby.etherscan.io/tx/${nftTxn.hash}`);\n\n        } else {\n            console.log(\"Ethereum object doesn't exist!\");\n        }\n    } catch (error) {\n        console.log(error)\n    }\n}\n\nconst getOwnerNft = async (currentAccount, tokenId) => {\n\n    const isConfirm = window.confirm(\"getOwnerNft?\");\n\n    if (!isConfirm) {\n        console.log('isConfirm = ', isConfirm);\n        return\n    }\n\n    const ethereum = window.ethereum;\n\n    if (ethereum === undefined || currentAccount === undefined) {\n        console.log('account undefined');\n        console.log('window.ethereum = ', ethereum);\n        return\n    }\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n    const nftOwner = await connectedContract.ownerOf(tokenId);\n\n    return nftOwner;\n}\n\nconst buyItem = async (currentAccount, tokenId, price) => {\n\n    const isConfirm = window.confirm(\"buyItem?\");\n\n    if (!isConfirm) {\n        console.log('isConfirm = ', isConfirm);\n        return\n    }\n\n    const ethereum = window.ethereum;\n\n    if (ethereum === undefined || currentAccount === undefined) {\n        console.log('account undefined');\n        console.log('window.ethereum = ', ethereum);\n        return\n    }\n\n    const provider = new ethers.providers.Web3Provider(ethereum);\n    const signer = provider.getSigner();\n    const connectedContract = new ethers.Contract(CONTRACT_ADDRESS, myEpicNft.abi, signer);\n\n    await connectedContract.buyItem(tokenId, {\n        value: ethers.utils.parseEther(price)\n    });\n}\n\nexport default {\n    checkIfWalletIsConnected,\n    connectWallet,\n    getAllNFT,\n    changeNftUri,\n    transferNft,\n    mintNft,\n    createNft,\n    getOwnerNft,\n    buyItem\n};\n","import React, { useEffect, useState } from \"react\";\nimport './../App.css';\nimport NftCard from \"./../components/nft-card/nft-card\";\nimport contractService from './../services/contract-service';\n\nconst MainPage = () => {\n    const [currentAccount, setCurrentAccount] = useState('');\n\n    const [nftArray, setNftArray] = useState([]);\n    const [isNftLoading, setIsNftLoading] = useState(false);\n\n\n    useEffect( () => {\n        (async () => {\n            const account = await contractService.checkIfWalletIsConnected();\n\n            if (account) {\n                setCurrentAccount(account)\n            }\n\n            setIsNftLoading(true);\n            const nftArray = await contractService.getAllNFT();\n            setIsNftLoading(false);\n            setNftArray(nftArray)\n        })();\n    }, [])\n\n    const nftAction = async (item) => {\n\n        if (currentAccount === '') {\n            alert('Подключите кошелек!');\n            return;\n        }\n\n        // const newUri = \"data:application/json;base64,eyJuYW1lIjogInNlY29uZCIsICJkZXNjcmlwdGlvbiI6ICIxMjMiLCAiaW1hZ2UiOiAiaHR0cHM6Ly9waXRlcmdzbS5ydS91cGxvYWQvcmVzaXplX2NhY2hlL2libG9jay84OTkvMzc4XzIyMF8xLzg5OTBhMWQ5MjA2ZWQzN2E4ZTI2NzM1ZTc4NzI3YjNiLnBuZyIgfQ==\"\n\n        // const nftOwner = await contractService.getOwnerNft(currentAccount, id)\n        // console.log('nftOwner = ', nftOwner)\n\n        // await changeNftUri(id, newUri);\n        // await transferNft(id, WALlET_TEST2)\n        // await getOwnerNft(id);\n        // await mintNft(id);\n        await contractService.buyItem(currentAccount, item.tokenId, item.price);\n    }\n\n    // MARK: - UI\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <div className=\"header-container\">\n\n                    <div style={{textAlign: 'right'}}>\n                        {currentAccount === '' ? (\n                            <button onClick={async () => {\n                                const account = await contractService.connectWallet();\n                                setCurrentAccount(account);\n                            }} className=\"cta-button connect-wallet-button\">\n                                Connect to Wallet\n                            </button>\n                        ) : (\n                            <div style={{color: 'white', height: '45px'}}>\n                                <span style={{border: '1px solid white', padding: '15px', borderRadius: '6px'}}>Account: {currentAccount}</span>\n                            </div>\n                        )}\n                    </div>\n\n                    <p className=\"header gradient-text\">Moloko NFT Collection</p>\n                    <p className=\"sub-text\">\n                        Personal NFT collection.\n                    </p>\n\n                    <div style={{color: 'white', textAlign: 'center'}}>\n                        {isNftLoading\n                            ? <h3>Загрузка...</h3>\n                            : <div>\n                                <div className=\"nft-card-container\">\n                                    {nftArray.map((item, index) =>\n                                        <NftCard key={index + 1} card={item} action={nftAction}/>\n                                    )}\n                                </div>\n                            </div>\n                        }\n                    </div>\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default MainPage;","import React, {useState} from 'react';\nimport {UploadClient} from \"@uploadcare/upload-client\";\n\nconst NewNftForm = ({createNft}) => {\n\n    const [newNftData, setNewNFtData] = useState({\n        name: '',\n        description: '',\n        price: '',\n        imageUrl: ''\n    });\n\n    const create = () => {\n        createNft(newNftData)\n    }\n\n    const uploadImageToServer = async (image) => {\n\n        if (image === undefined) {\n            console.log('Miss file');\n            return\n        }\n\n        console.log('starting')\n\n        let client = new UploadClient({\n            publicKey: '5791e9da84eedb4777e1'\n            // secret: 'afca50c056a5bd7b2b03'\n        })\n\n        client\n            .uploadFile(image)\n            .then(file => {\n\n                let url = `https://ucarecdn.com/${file.uuid}/bTZMz.jpg`\n                console.log('url = ', url)\n\n                setNewNFtData({...newNftData, imageUrl: url});\n            })\n            .catch(error => {\n                if (error.isCancel) {\n                    console.log(`File uploading was canceled.`)\n                }\n            })\n    }\n\n    return (\n        <div>\n            <div className=\"form-item\">\n                Name: <input type=\"text\" value={newNftData.name} onChange={e => {setNewNFtData({...newNftData, name: e.target.value})}} />\n            </div>\n\n            <div className=\"form-item\">\n                Description: <input type=\"text\" value={newNftData.description} onChange={e => {setNewNFtData({...newNftData, description: e.target.value})}} />\n            </div>\n\n            <div className=\"form-item\">\n                Price(in MATIC) : <input type=\"text\" value={newNftData.price} onChange={e => {setNewNFtData({...newNftData, price: e.target.value})}} />\n            </div>\n\n            <div className=\"form-item\">\n                ImageUrl: <input type=\"text\" value={newNftData.imageUrl} onChange={e => {setNewNFtData({...newNftData, imageUrl: e.target.value})}} />\n            </div>\n\n            <div className=\"form-item\">Image: <input type=\"file\" multiple accept=\"image/*\" onChange={e => {\n                uploadImageToServer(e.target.files[0])\n            }} /></div>\n\n            <hr/>\n\n            <div>\n                <div>name: {newNftData.name}</div><br/>\n                <div>description: {newNftData.description}</div><br/>\n                <div>imageUrl: <a target=\"_blank\" href={newNftData.imageUrl}>{newNftData.imageUrl}</a></div><br/>\n            </div>\n\n            <div className=\"form-item\">\n                <button onClick={create} className=\"cta-button connect-wallet-button\">\n                    Mint NFT\n                </button>\n            </div>\n        </div>\n    );\n};\n\nexport default NewNftForm;","import React, { useEffect, useState } from \"react\";\nimport './../App.css';\nimport NewNftForm from \"./../components/new-nft-form\";\nimport contractService from './../services/contract-service';\n\nconst CreateNftPage = () => {\n    const [currentAccount, setCurrentAccount] = useState('');\n    const [isLoading, setIsLoading] = useState(false);\n\n    useEffect(() => {\n        (async () => {\n            const account = await contractService.checkIfWalletIsConnected();\n\n            if (account) {\n                setCurrentAccount(account)\n            }\n        })();\n    }, [])\n\n\n    // MARK: - UI\n\n    return (\n        <div className=\"App\">\n            <div className=\"container\">\n                <div className=\"header-container\">\n\n                    <div style={{textAlign: 'right'}}>\n                        {currentAccount === '' ? (\n                            <button onClick={async () => {\n                                const account = await contractService.connectWallet();\n                                setCurrentAccount(account);\n                            }} className=\"cta-button connect-wallet-button\">\n                                Connect to Wallet\n                            </button>\n                        ) : (\n                            <div style={{color: 'white', height: '45px'}}>\n                                <span style={{border: '1px solid white', padding: '15px', borderRadius: '6px'}}>Account: {currentAccount}</span>\n                            </div>\n                        )}\n                    </div>\n\n                    <p className=\"header gradient-text\">Moloko NFT Collection</p>\n                    <p className=\"sub-text\">\n                        Personal NFT collection.\n                    </p>\n\n                    <div className=\"body-text\">\n\n                        <NewNftForm createNft={(newNftData) => {\n                            setIsLoading(true)\n                            contractService.createNft(currentAccount, newNftData)\n                            setIsLoading(false)\n                        }} />\n\n                    </div>\n\n                    {isLoading\n                        ? <h4>Loading...</h4>\n                        : <div></div>\n                    }\n\n                </div>\n            </div>\n        </div>\n    );\n};\n\nexport default CreateNftPage;","import React from \"react\";\nimport MainPage from \"./pages/main-page\";\nimport CreateNftPage from \"./pages/create-nft-page\";\nimport {BrowserRouter as Router, Route, Routes} from \"react-router-dom\";\n\nconst App = () => {\n\n    return (\n        <Router>\n            <Routes>\n                <Route exact path='/' element={<MainPage />} />\n                <Route exact path='/create' element={<CreateNftPage />} />\n                <Route path=\"*\" element={<MainPage />}/>\n            </Routes>\n        </Router>\n    );\n};\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from \"./App\";\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}